package com.cakeshoppingapp.flavor;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doThrow;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;

import java.util.ArrayList;
import java.util.List;

import org.hamcrest.Matchers;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import com.cakeshoppingapp.converters.FlavorDtoToFlavor;
import com.cakeshoppingapp.converters.FlavorToFlavorDtoConverter;
import com.cakeshoppingapp.dtoes.FlavorDTO;
import com.cakeshoppingapp.system.StatusCode;
import com.cakeshoppingapp.system.exceptions.SomethingAlreadyExistException;
import com.cakeshoppingapp.system.exceptions.SomethingNotFoundException;
import com.fasterxml.jackson.databind.ObjectMapper;

@SpringBootTest
@AutoConfigureMockMvc
public class FlavorControllerTest {

	@Autowired
	private MockMvc mockMvc;
	// the scope is per test method. spring will create a new instance for each
	// test.
	@MockBean
	private FlavorService flavorService;

	private Flavor flavor;
	private Flavor expectedFlavor;
	private FlavorDTO expectedDTO;

	@Autowired
	private ObjectMapper objectMapper;

	@Autowired
	FlavorToFlavorDtoConverter flavorToFlavorDtoConverter;

	@Autowired
	FlavorDtoToFlavor flavorDtoToFlavor;

	@BeforeEach
	void setUp() {
		flavor = new Flavor(3L, "Caramel", "\r\n" + "Caramel cake features a luxurious, buttery sweetness "
				+ "with warm, toasty notes of caramelized " + "sugar. Its flavor is reminiscent of rich toffee, with a"
				+ " smooth and slightly smoky depth that " + "creates a sumptuous and comforting dessert experience.");
		expectedFlavor = flavor;
		expectedDTO = flavorToFlavorDtoConverter.convert(expectedFlavor);
	}

	@Test
	void testSaveFlavor() throws Exception {
		// pre-requisits: first we need the object that we need to save in the database
		// in JSON format.
		// After that we start our testing steps:
		Flavor newFlavorForDTO = new Flavor("Lemon",
				"Lemon cake offers a bright, zesty flavor with a perfect balance of tartness and sweetness. "
						+ "Infused with fresh lemon juice and zest, it provides a refreshing and invigorating taste, "
						+ "complemented by a moist and tender crumb. This vibrant cake is often paired with tangy lemon "
						+ "glaze or creamy frosting, creating a delightful and uplifting treat.");
		// There is no need for the ID, it will be auto generated by DBMS.
		// The coming DTO in the request doesn't have the ID.
		// converting to DTO.
		// passing to controller.
		// converting to domain object.
		// passing to service.
		// converting the returned object to DTO again.
		// send it as a response.
		//

		FlavorDTO newFlavorDto = flavorToFlavorDtoConverter.convert(newFlavorForDTO);

		String flavorAsJson = objectMapper.writeValueAsString(newFlavorDto);

		// Here we know that the returned Flavor from the service should have an ID so
		// we set an ID to it.
		// Here we know the next ID is {4}
		Flavor returnedFlavorFromService = new Flavor(4L, newFlavorForDTO.getTitle(), newFlavorForDTO.getDescription());
		// converting the object returned and make it ready to send it in response.
		FlavorDTO responseDTO = flavorToFlavorDtoConverter.convert(returnedFlavorFromService);

		// Given
		given(flavorService.save(any(Flavor.class))).willReturn(returnedFlavorFromService);

		// When and Then
		this.mockMvc
				.perform(post("/flavors").contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)
						.content(flavorAsJson))
				.andExpect(jsonPath("$.flag").value(true)).andExpect(jsonPath("$.code").value(StatusCode.SUCCESS))
				.andExpect(jsonPath("$.message").value("Flavor Saved Successfully!"))
				.andExpect(jsonPath("$.data.id").isNotEmpty())
				.andExpect(jsonPath("$.data.title").value(responseDTO.title()))
				.andExpect(jsonPath("$.data.description").value(responseDTO.description()));

	}

	@Test
	void testSaveFlavorFailed() throws Exception {
		// pre-requisites
		Flavor newFlavorForDTO = flavor;
		// Like we said before: the DTO doesn't have an ID if it's coming from request.
		// So we set it as null.
		newFlavorForDTO.setId(null);

		FlavorDTO newFlavorDto = flavorToFlavorDtoConverter.convert(newFlavorForDTO);

		String flavorAsJson = objectMapper.writeValueAsString(newFlavorDto);
		// given
		given(flavorService.save(newFlavorForDTO))
				.willThrow(new SomethingAlreadyExistException(newFlavorForDTO.getTitle()));
		// When and Then
		this.mockMvc
				.perform(post("/flavors").accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON)
						.content(flavorAsJson))
				.andExpect(jsonPath("$.flag").value(false))
				.andExpect(jsonPath("$.code").value(StatusCode.ALREADY_EXIST))
				.andExpect(jsonPath("$.message").value("Already Exist In The Database::: " + newFlavorDto.title()))
				.andExpect(jsonPath("$.data").isEmpty());
	}

	@Test
	void testFindAll() throws Exception {
		List<FlavorDTO> expectedFlavorsAsDTO = new ArrayList<>();
		List<Flavor> expectedFlavors = new ArrayList<>();
		Flavor chocolateFlavor = new Flavor(1L, "Chocolate",
				"Chocolate cake boasts a deep," + " indulgent flavor with rich cocoa undertones and a moist,"
						+ " tender crumb. Its intense and satisfying taste is often"
						+ " enhanced by layers of smooth chocolate ganache or creamy frosting,"
						+ " making it a decadent favorite for chocolate lovers.");
		Flavor vanillaFlavor = new Flavor(2L, "Vanilla",
				"Vanilla cake offers a classic, timeless flavor characterized by its delicate sweetness and rich,"
						+ " creamy notes of pure vanilla. Its light and fluffy texture makes"
						+ " it a versatile dessert that pairs well with various frostings and"
						+ " fillings, providing a comforting and nostalgic treat.");

		Flavor caramelFlavor = new Flavor(3L, "Caramel", "\r\n"
				+ "Caramel cake features a luxurious, buttery sweetness " + "with warm, toasty notes of caramelized "
				+ "sugar. Its flavor is reminiscent of rich toffee, with a" + " smooth and slightly smoky depth that "
				+ "creates a sumptuous and comforting dessert experience.");
		expectedFlavorsAsDTO.add(flavorToFlavorDtoConverter.convert(chocolateFlavor));
		expectedFlavorsAsDTO.add(flavorToFlavorDtoConverter.convert(vanillaFlavor));
		expectedFlavorsAsDTO.add(flavorToFlavorDtoConverter.convert(caramelFlavor));
		expectedFlavors.add(chocolateFlavor);
		expectedFlavors.add(vanillaFlavor);
		expectedFlavors.add(caramelFlavor);
		// given
		given(flavorService.findAll()).willReturn(expectedFlavors);
		// When and Then
		this.mockMvc.perform(get("/flavors").accept(MediaType.APPLICATION_JSON))
				.andExpect(jsonPath("$.flag").value(true)).andExpect(jsonPath("$.code").value(StatusCode.SUCCESS))
				.andExpect(jsonPath("$.message").value("All Flavors Found!"))
				.andExpect(jsonPath("$.data", Matchers.hasSize(expectedFlavorsAsDTO.size())));
	}

	@Test
	void testFindByTitle() throws Exception {

		given(flavorService.findByTitle(expectedFlavor.getTitle())).willReturn(expectedFlavor);
		this.mockMvc
				.perform(get("/flavors").param("title", expectedFlavor.getTitle()).accept(MediaType.APPLICATION_JSON))
				.andExpect(jsonPath("$.flag").value(true)).andExpect(jsonPath("$.code").value(StatusCode.SUCCESS))
				.andExpect(jsonPath("$.message").value("Flavor With The Requested Title Is Found!"))
				.andExpect(jsonPath("$.data.id").value(expectedDTO.id()))
				.andExpect(jsonPath("$.data.title").value(expectedDTO.title()))
				.andExpect(jsonPath("$.data.description").value(expectedDTO.description()));
	}

	@Test
	void testFindByTitleFailed() throws Exception {
		expectedFlavor.setTitle("random....");
		expectedDTO = flavorToFlavorDtoConverter.convert(expectedFlavor);
		given(flavorService.findByTitle(anyString()))
				.willThrow(new SomethingNotFoundException(expectedFlavor.getTitle()));
		this.mockMvc.perform(get("/flavors").param("title", flavor.getTitle()).accept(MediaType.APPLICATION_JSON))
				.andExpect(jsonPath("$.flag").value(false)).andExpect(jsonPath("$.code").value(StatusCode.NOT_FOUND))
				.andExpect(jsonPath("$.message").value("Not Found! ::: " + expectedDTO.title()))
				.andExpect(jsonPath("$.data").isEmpty());
	}

	@Test
	void testFindByIdSuccess() throws Exception {
		given(flavorService.findById(flavor.getId())).willReturn(expectedFlavor);
		this.mockMvc.perform(get("/flavors/" + flavor.getId()).accept(MediaType.APPLICATION_JSON))
				.andExpect(jsonPath("$.flag").value(true)).andExpect(jsonPath("$.code").value(StatusCode.SUCCESS))
				.andExpect(jsonPath("$.message").value("Flavor With The Requested Title Is Found!"))
				.andExpect(jsonPath("$.data.id").value(expectedDTO.id()))
				.andExpect(jsonPath("$.data.title").value(expectedDTO.title()))
				.andExpect(jsonPath("$.data.description").value(expectedDTO.description()));
	}

	@Test
	void testFindByIdFailed() throws Exception {
		// just a random id;
		expectedFlavor.setId(16875645403545L);
		System.out.println("expected flavor id: " + expectedFlavor.getId());
		expectedDTO = flavorToFlavorDtoConverter.convert(expectedFlavor);
		given(flavorService.findById(anyLong()))
				.willThrow(new SomethingNotFoundException(expectedFlavor.getId().toString()));

		this.mockMvc.perform(get("/flavors/{id}", expectedFlavor.getId().toString()).accept(MediaType.APPLICATION_JSON))
				.andExpect(jsonPath("$.flag").value(false)).andExpect(jsonPath("$.code").value(StatusCode.NOT_FOUND))
				.andExpect(jsonPath("$.message").value("Not Found! ::: " + expectedDTO.id()))
				.andExpect(jsonPath("$.data").isEmpty());
	}

	@Test
	void testUpdateFlavorSuccess() throws Exception {
		Flavor updatesFlavorForDTO = new Flavor(1L, "Black Chocolate",
				"Black chocolate cake, also known as dark chocolate cake,"
						+ " delivers an intense and sophisticated flavor profile with deep,"
						+ " bold cocoa notes and a hint of bitterness."
						+ " Its rich and dense texture is complemented by a slightly less"
						+ " sweet taste, appealing to those who appreciate the robust and"
						+ " complex nuances of high-quality dark chocolate."
						+ " This decadent cake often pairs well with a variety of fillings"
						+ " and frostings, such as ganache or espresso-infused cream,"
						+ " enhancing its luxurious experience.");
		// Domain model to DTO
		FlavorDTO updatesFlavorDto = flavorToFlavorDtoConverter.convert(updatesFlavorForDTO);
		// DTO To JSON
		String flavorAsJson = objectMapper.writeValueAsString(updatesFlavorDto);
		// Just for clarity.
		Flavor returnedFlavorFromService = updatesFlavorForDTO;
		// converting the object returned and make it ready to send it in response.
		FlavorDTO responseDTO = flavorToFlavorDtoConverter.convert(returnedFlavorFromService);

		// Succeed
		given(flavorService.update(eq(1L), any(Flavor.class))).willReturn(returnedFlavorFromService);
		// Failed
		/*
		 * given(flavorService.update(1L, updatesFlavorForDTO))
		 * .willReturn(returnedFlavorFromService);
		 */

		// When and Then
		mockMvc.perform(put("/flavors/{id}", 1L).content(flavorAsJson).accept(MediaType.APPLICATION_JSON)
				.contentType(MediaType.APPLICATION_JSON)).andExpect(jsonPath("$.flag").value(true))
				.andExpect(jsonPath("$.code").value(StatusCode.SUCCESS))
				.andExpect(jsonPath("$.message").value("Flavor Updated Successfully!"))
				.andExpect(jsonPath("$.data.id").value(updatesFlavorDto.id()))
				.andExpect(jsonPath("$.data.title").value(updatesFlavorDto.title()))
				.andExpect(jsonPath("$.data.description").value(updatesFlavorDto.description()));

		assertEquals(returnedFlavorFromService, updatesFlavorForDTO);

	}

	@Test
	void testUpdateFlavorFailed() throws Exception {
		// pre-requisites
		Flavor flavorUpdatesDTO = flavor;
		// Like we said before: the DTO doesn't have an ID if it's coming from request.
		// So we set it as null.
		flavorUpdatesDTO.setId(4651546511L);

		FlavorDTO updateFlavorDto = flavorToFlavorDtoConverter.convert(flavorUpdatesDTO);

		String flavorAsJson = objectMapper.writeValueAsString(updateFlavorDto);
		// given
		given(flavorService.update(eq(4651546511L), any(Flavor.class)))
				.willThrow(new SomethingNotFoundException(4651546511L + ""));
//		given(flavorService.update(eq(flavorUpdatesDTO.getId()), any(Flavor.class)))
//		.willThrow(new SomethingNotFoundException(flavorUpdatesDTO.getId() + ""));
		// When and Then
		this.mockMvc
				.perform(put("/flavors/{id}", flavorUpdatesDTO.getId()).accept(MediaType.APPLICATION_JSON)
						.contentType(MediaType.APPLICATION_JSON).content(flavorAsJson))
				.andExpect(jsonPath("$.flag").value(false)).andExpect(jsonPath("$.code").value(StatusCode.NOT_FOUND))
				.andExpect(jsonPath("$.message").value("Not Found! ::: " + updateFlavorDto.id()))
				.andExpect(jsonPath("$.data").isEmpty());
	}

	@Test
	void deleteFlavorById() throws Exception {
		doNothing().when(flavorService).deleteById(flavor.getId());
		this.mockMvc.perform(delete("/flavors/{id}", flavor.getId()).accept(MediaType.APPLICATION_JSON))
				.andExpect(jsonPath("$.flag").value(true)).andExpect(jsonPath("$.code").value(StatusCode.SUCCESS))
				.andExpect(jsonPath("$.message").value("Flavor Deleted Successfully!"))
				.andExpect(jsonPath("$.data").isEmpty());
	}

	@Test
	void deleteFlavorByIdFailed() throws Exception {
		Long randomId = 64513147L;
		doThrow(new SomethingNotFoundException(randomId + "")).when(flavorService).deleteById(anyLong());
		this.mockMvc.perform(delete("/flavors/{id}", randomId).accept(MediaType.APPLICATION_JSON))
				.andExpect(jsonPath("$.flag").value(false)).andExpect(jsonPath("$.code").value(StatusCode.NOT_FOUND))
				.andExpect(jsonPath("$.message").value("Not Found! ::: " + randomId))
				.andExpect(jsonPath("$.data").isEmpty());
	}

}
